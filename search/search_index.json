{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Warning Work in progress. The docs are not yet complete. Ring is a cross-platform command-line tool that can run and monitor workspaces built of apps (aka runnables ) - e.g. processes, Docker Compose files, Kustomize apps, and more). Workspaces are declarative configuration files (using TOML format). Ring exposes a web-socket server. Clients (like the VS Code extension) can use it to control Ring and subscribe to real-time apps status notifications. Requirements Ring is a dotnet cli tool which means it requires Dotnet SDK. Various app types may require additional components. Read more in the authoring workspaces section.","title":"Home"},{"location":"#requirements","text":"Ring is a dotnet cli tool which means it requires Dotnet SDK. Various app types may require additional components. Read more in the authoring workspaces section.","title":"Requirements"},{"location":"authoring-workspaces/","text":"Workspaces are TOML files and they mostly use the arrays of tables to define workspace components. Apps Kustomize app Requirements: local Kubernetes cluster kubectl kustomize [[kustomize]] path = \"path/to/app\" Docker Compose app Requirements: Docker Desktop [[dockercompose]] path = \"path/to/docker-compose.yml\" Dotnet app Requirements: Dotnet SDK [[aspnetcore]] csproj = \"/path/to/your/project.csproj\" Process [[proc]] command = \"sleep\" args = [ \"30\" ] [proc.vars] MY_TEST_ENV_VAR = \"NONSENSE\" YET_ANOTHER = \"QUIT\" Legacy formats ASP.NET Core (IIS Express) Requirements: Dotnet SDK [[iisxcore]] csproj = \"path/to/your/project.csproj\" .NET Framework web service (IIS Express) Legacy Windows web services like AspNet MVC or WCF Requirements: .NET Framework (4.*) [[iisexpress]] csproj = \"path/to/your/project.csproj\" .NET Framework executable project Legacy Windows services like TopShelf Requirements: .NET Framework (4.*) [[netexe]] csproj = \"path/to/your/project.csproj\" Imports Ring workspaces can be composed from other workspaces. If the same app is declared multiple times in imported workspaces they will be deduplicated and only one instance of an app will be launched. Simplified syntax: imports = [ \"path/to/workspace/a.toml\" , \"path/to/workspace/b.toml\" , \"path/to/yet/another/workspace/c.toml\" ] Classic syntax: [[import]] path = \"path/to/workspace/a.toml\" [[import]] path = \"path/to/workspace/b.toml\" [[import]] path = \"path/to/yet/another/workspace/c.toml\" Comment # This is a comment # [[aspnetcore]] # csproj = \"/path/to/your/project.csproj\" Running multiple instances of a app v4 only If there are two (or more) apps with the same identifier Ring de-duplicates them and only runs a single instance. Sometimes the user may want run multiple instances of a single app. Each instance can be configured with an id key as follows: [[proc]] command = \"sleep\" args = [ \"30\" ] id = \"sleep-1\" [[proc]] command = \"sleep\" args = [ \"60\" ] id = \"sleep-2\" Now ring runs two sleep processes. Workspace flavours v4 only Sometimes the user may have multiple workspaces that significantly overlap. Stopping one workspace and starting another may be quite slow if there are tens of apps. Flavours help to solve that problem with only stopping apps that are not included in the new workspace and only starting the ones that were not running in the previous one. All the apps existing in both keep happily running. Example Flavours are specified with tags and each app can have multiple. The below workspace has 3 flavours: a , b , and backend . Given we run flavour a : app-x app-common-1 app-common-2 app-common-3 ui-a When we apply flavour b : It stops: app-x ui-a It starts: app-y ui-b All the 3 common apps keep running. [[kustomize]] path = \"app-x\" tags = [ \"a\" , \"backend\" ] [[kustomize]] path = \"app-y\" tags = [ \"b\" , \"backend\" ] [[kustomize]] path = \"app-common-1\" tags = [ \"a\" , \"b\" , \"backend\" ] [[kustomize]] path = \"app-common-2\" tags = [ \"a\" , \"b\" , \"backend\" ] [[kustomize]] path = \"app-common-3\" tags = [ \"a\" , \"b\" , \"backend\" ] [[kustomize]] path = \"ui-a\" tags = [ \"a\" ] [[kustomize]] path = \"ui-b\" tags = [ \"b\" ]","title":"Authoring Workspaces"},{"location":"authoring-workspaces/#apps","text":"","title":"Apps"},{"location":"authoring-workspaces/#kustomize-app","text":"Requirements: local Kubernetes cluster kubectl kustomize [[kustomize]] path = \"path/to/app\"","title":"Kustomize app"},{"location":"authoring-workspaces/#docker-compose-app","text":"Requirements: Docker Desktop [[dockercompose]] path = \"path/to/docker-compose.yml\"","title":"Docker Compose app"},{"location":"authoring-workspaces/#dotnet-app","text":"Requirements: Dotnet SDK [[aspnetcore]] csproj = \"/path/to/your/project.csproj\"","title":"Dotnet app"},{"location":"authoring-workspaces/#process","text":"[[proc]] command = \"sleep\" args = [ \"30\" ] [proc.vars] MY_TEST_ENV_VAR = \"NONSENSE\" YET_ANOTHER = \"QUIT\"","title":"Process"},{"location":"authoring-workspaces/#legacy-formats","text":"","title":"Legacy formats"},{"location":"authoring-workspaces/#aspnet-core-iis-express","text":"Requirements: Dotnet SDK [[iisxcore]] csproj = \"path/to/your/project.csproj\"","title":"ASP.NET Core (IIS Express)"},{"location":"authoring-workspaces/#net-framework-web-service-iis-express","text":"Legacy Windows web services like AspNet MVC or WCF Requirements: .NET Framework (4.*) [[iisexpress]] csproj = \"path/to/your/project.csproj\"","title":".NET Framework web service (IIS Express)"},{"location":"authoring-workspaces/#net-framework-executable-project","text":"Legacy Windows services like TopShelf Requirements: .NET Framework (4.*) [[netexe]] csproj = \"path/to/your/project.csproj\"","title":".NET Framework executable project"},{"location":"authoring-workspaces/#imports","text":"Ring workspaces can be composed from other workspaces. If the same app is declared multiple times in imported workspaces they will be deduplicated and only one instance of an app will be launched. Simplified syntax: imports = [ \"path/to/workspace/a.toml\" , \"path/to/workspace/b.toml\" , \"path/to/yet/another/workspace/c.toml\" ] Classic syntax: [[import]] path = \"path/to/workspace/a.toml\" [[import]] path = \"path/to/workspace/b.toml\" [[import]] path = \"path/to/yet/another/workspace/c.toml\"","title":"Imports"},{"location":"authoring-workspaces/#comment","text":"# This is a comment # [[aspnetcore]] # csproj = \"/path/to/your/project.csproj\"","title":"Comment"},{"location":"authoring-workspaces/#running-multiple-instances-of-a-app","text":"v4 only If there are two (or more) apps with the same identifier Ring de-duplicates them and only runs a single instance. Sometimes the user may want run multiple instances of a single app. Each instance can be configured with an id key as follows: [[proc]] command = \"sleep\" args = [ \"30\" ] id = \"sleep-1\" [[proc]] command = \"sleep\" args = [ \"60\" ] id = \"sleep-2\" Now ring runs two sleep processes.","title":"Running multiple instances of a app"},{"location":"authoring-workspaces/#workspace-flavours","text":"v4 only Sometimes the user may have multiple workspaces that significantly overlap. Stopping one workspace and starting another may be quite slow if there are tens of apps. Flavours help to solve that problem with only stopping apps that are not included in the new workspace and only starting the ones that were not running in the previous one. All the apps existing in both keep happily running. Example Flavours are specified with tags and each app can have multiple. The below workspace has 3 flavours: a , b , and backend . Given we run flavour a : app-x app-common-1 app-common-2 app-common-3 ui-a When we apply flavour b : It stops: app-x ui-a It starts: app-y ui-b All the 3 common apps keep running. [[kustomize]] path = \"app-x\" tags = [ \"a\" , \"backend\" ] [[kustomize]] path = \"app-y\" tags = [ \"b\" , \"backend\" ] [[kustomize]] path = \"app-common-1\" tags = [ \"a\" , \"b\" , \"backend\" ] [[kustomize]] path = \"app-common-2\" tags = [ \"a\" , \"b\" , \"backend\" ] [[kustomize]] path = \"app-common-3\" tags = [ \"a\" , \"b\" , \"backend\" ] [[kustomize]] path = \"ui-a\" tags = [ \"a\" ] [[kustomize]] path = \"ui-b\" tags = [ \"b\" ]","title":"Workspace flavours"},{"location":"configuration/","text":"This section is about configuring the tool itself rather than authoring workspaces . Ring can be configured using appsettings.toml and/or environment variables. Toml files may exist in 3 scopes: default - the base config shipped with the tool that should not be modified (as it gets overwritten when installing new version of ring) user - user-scoped config local - directory-scoped config The most specific scope takes precedence. Environment variables take precedence over appsettings.toml . Tasks Display config paths You can display paths of the above configs using ring config-path with an appropriate scope flag. Create configs You can also generate appsettings.toml using ring config-create (also with the right scope flag). Dump configuration You can verify how the fully-built configuration store looks like via ring config-dump . Configuration keys Note When configuring the below via environment variables use RING_ prefix and replace . by __ (double underscore). For example: hooks.init.command becomes RING_HOOKS__INIT__COMMAND . git.clonePath - the path where ring clones the repos of runnables that support it. Default: $HOME/.ring/repos kustomize.CachePath - the path of kustomize cache. Default: $HOME/.ring/kustomize-cache workspace.startupSpreadFactor - controls how quickly ring launches runnables. Increase to spread launching over time. Default: 1500 kubernetes.configPath - which config path to use. KUBECONFIG env var takes precedence if set. Default: $HOME/.kube/config kubernetes.allowedContexts - making any changes to the cluster fails if the current context is not one from this list. Default: [\"docker-desktop\", \"rancher-desktop\", \"minikube\"] hooks.init.command - a command to be run on the workspace init hook event. Default: N/A hooks.init.args - arguments to be passed to the above command. Default: N/A","title":"Configuration"},{"location":"configuration/#tasks","text":"","title":"Tasks"},{"location":"configuration/#display-config-paths","text":"You can display paths of the above configs using ring config-path with an appropriate scope flag.","title":"Display config paths"},{"location":"configuration/#create-configs","text":"You can also generate appsettings.toml using ring config-create (also with the right scope flag).","title":"Create configs"},{"location":"configuration/#dump-configuration","text":"You can verify how the fully-built configuration store looks like via ring config-dump .","title":"Dump configuration"},{"location":"configuration/#configuration-keys","text":"Note When configuring the below via environment variables use RING_ prefix and replace . by __ (double underscore). For example: hooks.init.command becomes RING_HOOKS__INIT__COMMAND . git.clonePath - the path where ring clones the repos of runnables that support it. Default: $HOME/.ring/repos kustomize.CachePath - the path of kustomize cache. Default: $HOME/.ring/kustomize-cache workspace.startupSpreadFactor - controls how quickly ring launches runnables. Increase to spread launching over time. Default: 1500 kubernetes.configPath - which config path to use. KUBECONFIG env var takes precedence if set. Default: $HOME/.kube/config kubernetes.allowedContexts - making any changes to the cluster fails if the current context is not one from this list. Default: [\"docker-desktop\", \"rancher-desktop\", \"minikube\"] hooks.init.command - a command to be run on the workspace init hook event. Default: N/A hooks.init.args - arguments to be passed to the above command. Default: N/A","title":"Configuration keys"},{"location":"known-issues/","text":"Permission Issue on Apple Silicon Running Ring! on Apple Silicone with .NET 6 (x64) installed can result in permission errors such as this one: ['/etc/dotnet/install_location_x64'] failed to open: Permission denied. To resolve this issue add your user to the dotnet directory (and its enclosed items) with Read & Write permissions.","title":"Known issues"},{"location":"known-issues/#permission-issue-on-apple-silicon","text":"Running Ring! on Apple Silicone with .NET 6 (x64) installed can result in permission errors such as this one: ['/etc/dotnet/install_location_x64'] failed to open: Permission denied. To resolve this issue add your user to the dotnet directory (and its enclosed items) with Read & Write permissions.","title":"Permission Issue on Apple Silicon"},{"location":"use-cases/","text":"Warning Work in progress. The docs are not yet complete.","title":"Use cases"},{"location":"dotnet-cli/","text":"Ring dotnet cli tool is a meta-orchestrator helping developers transition from monolithic systems into microservice cloud-based systems. --> Docs on GitHub <--","title":"Index"},{"location":"runnables/aspnetcore/","text":"ASP.NET Core runnable It runs ASP.NET Core and other .NET Core apps. Syntax [[aspnetcore]] sshRepoUrl = \"git@your.git.server:path/to/repo.git\" csproj = \"path/to/your/project.name.csproj\" urls = [ \"http://localhost:6201/\" ] Config keys sshRepoUrl (optional string ) - if set Ring clones the default branch (usually main ) of the specified repo and attempts to build and execute the project specified by the csproj key. Ring clones are located at %TEMP%/ring/repos/path/to/repo . If the clone already exists Ring preforms git pull instead. csproj (mandatory string ) - if sshRepoUrl is used then csproj must be a relative path and the project is loaded from %TEMP%/ring/repos/path/to/repo/${csProj} . If sshRepoUrl is not set then csproj may be either absolute or relative. urls (optional string[] ) - one or more URLs that are passed to the ASPNETCORE_URLS env variable How it works Given project name is project.name Ring scans project's build ouput for either a project.name.exe file (.NET Core 3.1) or project.name.dll . Exes are run directly whereas dlls are executed using dotnet exec . Environment variables Ring passes the following env variables to the spawned process: ASPNETCORE_ENVIRONMENT = Development ASPNETCORE_URLS = the value of urls from runnable configuration (values joined by ; ) Health check Ring does a simple \"is the process alive\" check.","title":"ASP.NET Core runnable"},{"location":"runnables/aspnetcore/#aspnet-core-runnable","text":"It runs ASP.NET Core and other .NET Core apps.","title":"ASP.NET Core runnable"},{"location":"runnables/aspnetcore/#syntax","text":"[[aspnetcore]] sshRepoUrl = \"git@your.git.server:path/to/repo.git\" csproj = \"path/to/your/project.name.csproj\" urls = [ \"http://localhost:6201/\" ]","title":"Syntax"},{"location":"runnables/aspnetcore/#config-keys","text":"sshRepoUrl (optional string ) - if set Ring clones the default branch (usually main ) of the specified repo and attempts to build and execute the project specified by the csproj key. Ring clones are located at %TEMP%/ring/repos/path/to/repo . If the clone already exists Ring preforms git pull instead. csproj (mandatory string ) - if sshRepoUrl is used then csproj must be a relative path and the project is loaded from %TEMP%/ring/repos/path/to/repo/${csProj} . If sshRepoUrl is not set then csproj may be either absolute or relative. urls (optional string[] ) - one or more URLs that are passed to the ASPNETCORE_URLS env variable","title":"Config keys"},{"location":"runnables/aspnetcore/#how-it-works","text":"Given project name is project.name Ring scans project's build ouput for either a project.name.exe file (.NET Core 3.1) or project.name.dll . Exes are run directly whereas dlls are executed using dotnet exec .","title":"How it works"},{"location":"runnables/aspnetcore/#environment-variables","text":"Ring passes the following env variables to the spawned process: ASPNETCORE_ENVIRONMENT = Development ASPNETCORE_URLS = the value of urls from runnable configuration (values joined by ; )","title":"Environment variables"},{"location":"runnables/aspnetcore/#health-check","text":"Ring does a simple \"is the process alive\" check.","title":"Health check"},{"location":"runnables/iisexpress/","text":"IIS Express runnable It runs .NET Framework WCF services and ASP.NET MVC websites. Syntax [[iisexpress]] csproj = \"path/to/your/project.csproj\" How it works IIS Express runnable expects the following XML elements exist in csproj file: <Project> <ProjectExtensions> <VisualStudio> <FlavorProperties GUID= \"{349c5851-65df-11da-9384-00065b846f21}\" > <WebProjectProperties> <DevelopmentServerPort> 90 </DevelopmentServerPort> <IISUrl> http://domain.name:90/ </IISUrl> </WebProjectProperties> </FlavorProperties> </VisualStudio> </ProjectExtensions> </Project> Ring before 1.1.10 only uses DevelopmentServerPort and assumes localhost when running IIS Express. Version 1.1.10 and later versions support non-localhost bindings by utilising IISUrl first and falling back to DevelopmentServerPort if IISUrl is not found. Health check Ring does a simple \"is IIS Express process alive\" check. Additionally for WCF services it detects all the .svc files in the project directory and checks whether they return HTTP 200.","title":"IIS Express runnable"},{"location":"runnables/iisexpress/#iis-express-runnable","text":"It runs .NET Framework WCF services and ASP.NET MVC websites.","title":"IIS Express runnable"},{"location":"runnables/iisexpress/#syntax","text":"[[iisexpress]] csproj = \"path/to/your/project.csproj\"","title":"Syntax"},{"location":"runnables/iisexpress/#how-it-works","text":"IIS Express runnable expects the following XML elements exist in csproj file: <Project> <ProjectExtensions> <VisualStudio> <FlavorProperties GUID= \"{349c5851-65df-11da-9384-00065b846f21}\" > <WebProjectProperties> <DevelopmentServerPort> 90 </DevelopmentServerPort> <IISUrl> http://domain.name:90/ </IISUrl> </WebProjectProperties> </FlavorProperties> </VisualStudio> </ProjectExtensions> </Project> Ring before 1.1.10 only uses DevelopmentServerPort and assumes localhost when running IIS Express. Version 1.1.10 and later versions support non-localhost bindings by utilising IISUrl first and falling back to DevelopmentServerPort if IISUrl is not found.","title":"How it works"},{"location":"runnables/iisexpress/#health-check","text":"Ring does a simple \"is IIS Express process alive\" check. Additionally for WCF services it detects all the .svc files in the project directory and checks whether they return HTTP 200.","title":"Health check"},{"location":"runnables/kustomize/","text":"Kustomize runnable It runs Kustomize apps in a Kubernetes cluster. Requirements A local K8s cluster Installed kubectl and kustomize Supported paths Ring supports every path supported by Kustomize ( go-getter ) Caching Ring caches generated manifests to speed up subsequent executions. The default cache location is /tmp/kustomize-cache and can be configured Syntax [[kustomize]] path = \"ssh://git@your.domain/repo.git/path/to/app?ref=branch-name\" [[kustomize]] path = \"local/app\"","title":"Kustomize runnable"},{"location":"runnables/kustomize/#kustomize-runnable","text":"It runs Kustomize apps in a Kubernetes cluster.","title":"Kustomize runnable"},{"location":"runnables/kustomize/#requirements","text":"A local K8s cluster Installed kubectl and kustomize","title":"Requirements"},{"location":"runnables/kustomize/#supported-paths","text":"Ring supports every path supported by Kustomize ( go-getter )","title":"Supported paths"},{"location":"runnables/kustomize/#caching","text":"Ring caches generated manifests to speed up subsequent executions. The default cache location is /tmp/kustomize-cache and can be configured","title":"Caching"},{"location":"runnables/kustomize/#syntax","text":"[[kustomize]] path = \"ssh://git@your.domain/repo.git/path/to/app?ref=branch-name\" [[kustomize]] path = \"local/app\"","title":"Syntax"}]}